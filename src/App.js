// Import React hooks
import React, { useState } from 'react';

// Import Material-UI theme v√† styling
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { Container, Box, CssBaseline, AppBar, Toolbar, Typography, Tabs, Tab } from '@mui/material';

// Import toast notification library
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Import c√°c components
import TreasureHuntForm from './components/problemSolve/TreasureHuntForm';
import HistoryList from './components/problemHistory/HistoryList';
import ProblemDescription from './components/problemDescription/ProblemDescription';

// Import enums
import { TabIndex } from './enums/TabIndex';

const theme = createTheme({
  palette: {
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#ff9800',
    },
  },
});

function App() {
  // State qu·∫£n l√Ω tab hi·ªán t·∫°i (M√¥ t·∫£ / Gi·∫£i / L·ªãch s·ª≠)
  const [currentTab, setCurrentTab] = useState(TabIndex.PROBLEM_DESCRIPTION);

  // State ƒë·ªÉ trigger reload l·∫°i history list
  const [refreshHistory, setRefreshHistory] = useState(0);

  // State l∆∞u d·ªØ li·ªáu form khi retry t·ª´ history
  const [formData, setFormData] = useState(null);

  /**
   * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng chuy·ªÉn tab
   * @param {*} event - Event c·ªßa tab change
   * @param {TabIndex} newValue - Index c·ªßa tab m·ªõi
   */
  const handleTabChange = (event, newValue) => {
    setCurrentTab(newValue);
    setFormData(null); // Reset form data khi chuy·ªÉn tab
  };

  /**
   * Callback khi l∆∞u solution th√†nh c√¥ng, load l·∫°i l·ªãch s·ª≠
   */
  const handleSolutionSaved = () => {
    setRefreshHistory(prev => prev + 1);
  };

  /**
   * Gi·∫£i b√†i to√°n v·ªõi input ƒë√£ l∆∞u
   * @param {Object} data - D·ªØ li·ªáu input ƒë√£ l∆∞u t·ª´ history
   */
  const handleRetry = (data) => {
    setFormData(data);
    setCurrentTab(TabIndex.SOLVE_PROBLEM);
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />

      {/* Toast notification container */}
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      <Box sx={{ flexGrow: 1 }}>
        <AppBar position="static">
          <Toolbar>
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              üè¥‚Äç‚ò†Ô∏è T√¨m Kho B√°u H·∫£i T·∫∑c
            </Typography>
          </Toolbar>
        </AppBar>

        <Container maxWidth="lg" sx={{ mt: 2, mb: 2 }}>
          {/* Tab navigation */}
          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
            <Tabs value={currentTab} onChange={handleTabChange}>
              <Tab label="M√¥ T·∫£ B√†i To√°n" />
              <Tab label="Gi·∫£i B√†i To√°n" />
              <Tab label="L·ªãch S·ª≠" />
            </Tabs>
          </Box>

          {/* Tab 1: Hi·ªÉn th·ªã m√¥ t·∫£ b√†i to√°n */}
          {currentTab === TabIndex.PROBLEM_DESCRIPTION && <ProblemDescription />}

          {/* Tab 2: Form gi·∫£i b√†i to√°n */}
          {currentTab === TabIndex.SOLVE_PROBLEM && (
            <TreasureHuntForm
              onSolutionSaved={handleSolutionSaved}
              initialData={formData}
            />
          )}

          {/* Tab 3: Danh s√°ch l·ªãch s·ª≠ (c√°c input ƒë√£ l∆∞u)*/}
          {currentTab === TabIndex.HISTORY && (
            <HistoryList
              refresh={refreshHistory}
              onRetry={handleRetry}
            />
          )}
        </Container>
      </Box>
    </ThemeProvider>
  );
}

export default App;
